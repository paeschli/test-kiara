# -*-Python-*-

import os
from builder.bconfig import getArchInfo, ARCH_X86_64, Version
Import('env')

platform = env['PLATFORM']
compiler = env['compiler']
isWin32 = (platform == 'win32')
isGCC = (compiler == 'GCC')

# Note: Clang is currently supported as a subset of GCC
isClangCXX = 'clang' in env['CXX']
isClangCC = 'clang' in env['CC']

archInfo = getArchInfo(env)
isX64 = archInfo.getArchID() == ARCH_X86_64

# Generate source file with the Git Repository Revision
versionBuildTemplate="""/*
 * This file is automatically generated by the build process
 * DO NOT EDIT!
 */

#define KIARA_LIB
#include <KIARA/Common/Config.hpp>
#include <KIARA/kiara.h>

const char * kiaraGetRepositoryRevision(void)
{
    return "%s";
}
"""

env.Textfile("KIARA/kiara_version_kiaraGetRepositoryRevision.cpp", versionBuildTemplate % env.get('GIT_REVISION', ''))

# Build lemon parser
lemon_tool = env.Program('lemon', 'lemon.c')
# Build bin2c tool
bin2c_tool = env.Program('bin2c', 'bin2c.c')

env.Command(['KIARA/IDL/kiaray.cpp', 'KIARA/IDL/kiaray_tokens.hpp'], # 'kiaray.out'
            ['KIARA/IDL/kiaray.yy', 'lempar.c', lemon_tool[0]],
            lemon_tool[0].abspath + ' T=${SOURCES[1]} H=${TARGETS[1]} O=$TARGET $SOURCE')
env.Command('KIARA/IDL/kiaral.cpp', 'KIARA/IDL/kiaral.ll',
            'flex -o $TARGET $SOURCE')

env.Append(LIBPATH = '.')
env.Append(CPPPATH = '.')

class Config:
    def __init__(self, sources=None, objects=None, libs=None, cppdefines=None):
        self.sources = sources or []
        self.objects = objects or []
        self.libs = libs or []
        self.cppdefines = cppdefines or []

kiara = Config()
kiara.sources.extend(env.Glob("KIARA/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/*.c"))
kiara.sources.extend(env.Glob("KIARA/CDT/*.c"))
kiara.sources.extend(env.Glob("KIARA/Core/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/DB/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/IRGen/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/Utils/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/IDL/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/Server/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/Transport/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/Impl/*.cpp"))
kiara.sources.extend(env.Glob("KIARA/Impl/*.c"))
kiara.libs = env.Split('DFC boost_filesystem boost_thread ssl  curl  ') # crypto ldap lber
kiara.ccflags = env.Split('$CCFLAGS')

ccwarnflags = []
if isGCC:
    ccwarnflags.extend(env.Split('-Wno-unused-local-typedefs'))
    kiara.ccflags.extend(ccwarnflags)

# LLVM Configuration
llvmPkg = env.GetPackage('llvm')
HAVE_LLVM = bool(llvmPkg)
HAVE_LLVMTOOLS = bool(env.get('HAVE_LLVMTOOLS', False))
LLVM_HAS_FNO_RTTI_FLAG = False

if HAVE_LLVM:
    LLVM_VERSION = llvmPkg.vars['LLVM_VERSION']
    try:
        LLVM_HAS_FNO_RTTI_FLAG = \
            '-fno-rtti' in llvmPkg.vars['LLVM_CONFIG_CXXFLAGS']['CCFLAGS']
    except:
        pass

clangPkg = env.GetPackage('clang')
HAVE_CLANG = bool(clangPkg) and HAVE_LLVM

if HAVE_CLANG:
    CLANG_LIB_DIR = clangPkg.vars["COMPILER_LIB_DIR"]
    CLANG_LIB_DIR_DEF = ("CLANG_LIB_DIR", '"\\"'+str(CLANG_LIB_DIR)+'\\""')

# RTI DDS Configuration
HAVE_NDDS_CPP = bool(env.get('HAVE_NDDS_CPP', False))
HAVE_NDDS_C = bool(env.get('HAVE_NDDS_C', False))

####

if HAVE_LLVM and HAVE_LLVMTOOLS:

    def CreateBitcodeCompilationEnvironment(env, cppdefines=None, cpppath=None):
        bitcode_env = env.Clone()
        #print 'ENV was',env['ENV']['PATH']
        #print 'ENV is',bitcode_env['ENV']['PATH']

        bitcode_env.AppendUnique(LLVM_CPPDEFINES=['KIARA_LLVM', 'KIARA_LLVM_BITCODE'])
        bitcode_env.AppendUnique(LLVM_CCFLAGS=bitcode_env.Split("-W -Wall -pedantic-errors -Wno-unused-function"))

        if isX64:
            bitcode_env.AppendUnique(LLVM_CCFLAGS=['-m64'])
        else:
            bitcode_env.AppendUnique(LLVM_CCFLAGS=['-m32'])
        bitcode_env.AppendUnique(LLVM_OPTFLAGS=bitcode_env.Split("-O3"))
        if cppdefines:
            bitcode_env.AppendUnique(LLVM_CPPDEFINES=cppdefines)
        if cpppath:
            bitcode_env.AppendUnique(LLVM_CPPPATH=cpppath)
        return bitcode_env
    env.AddMethod(CreateBitcodeCompilationEnvironment)

kiara.sources.extend(env.Glob('KIARA/Compiler/*.cpp'))
kiara.sources.extend(env.Glob('KIARA/Runtime/*.cpp'))

if HAVE_LLVM:
    kiara.cppdefines.append('HAVE_LLVM')

    # The LLVM-related files need to be compiled twice
    # 1. Separate static library used with pure LLVM tools
    # 2. Inclusion into LLVM shared library
    # In both cases LLVM-specific options are used (e.g. -fno-rtti on Linux)
    llvmLibSources = []
    llvmLibSources.extend(env.Glob("KIARA/LLVM/*.cpp"))
    llvmLibSources.extend(env.Glob("KIARA/LLVM/AsmParser/*.cpp"))

    env_llvm = env.Clone()
    env_llvm.RequirePackage('llvm')
    env_llvm_shared = env_llvm.Clone()

    # On Windows we can't link LLVM dynamically
    if isWin32:
        LLVM_LIB = 'LLVM'
        MkObject = env_llvm.StaticObject
        MkLibrary = env_llvm.StaticLibrary
        env_llvm.AppendUnique(CPPDEFINES='KIARA_STATIC_LIB') # This disables dllexport
    else:
        LLVM_LIB = 'LLVM_shared'
        MkObject = env_llvm.SharedObject
        MkLibrary = env_llvm.SharedLibrary

    kiara.libs.append(LLVM_LIB)

    if env['LLVM_HAS_DEBUGFLAG']:
        kiara.cppdefines.append('LLVM_HAS_DEBUGFLAG')
        env_llvm.AppendUnique(CPPDEFINES='LLVM_HAS_DEBUGFLAG')
        env_llvm_shared.AppendUnique(CPPDEFINES='LLVM_HAS_DEBUGFLAG')
    if LLVM_HAS_FNO_RTTI_FLAG:
        env_llvm.AppendUnique(CCFLAGS=['-fno-rtti'])
        env_llvm_shared.AppendUnique(CCFLAGS=['-fno-rtti'])

    objects = []
    for f in llvmLibSources:
        objects.extend(MkObject(env.subst("${SOURCE.filebase}_standalone", source=f), f))
        kiara.objects.extend(env_llvm_shared.SharedObject(env.subst("${SOURCE.filebase}_shared", source=f), f))
    MkLibrary('KIARA_LLVM', objects, LIBS=[LLVM_LIB])

    del objects
    
    setTargetTool = env_llvm.Program('kiara-set-target', 'tools/set_target.cpp', LIBS=['KIARA_LLVM', LLVM_LIB])
    removeAsmTool = env_llvm.Program('kiara-remove-asm', 'tools/remove_asm.cpp', LIBS=['KIARA_LLVM', LLVM_LIB])
    sysLibs = []
    if isWin32:
        sysLibs.append('wsock32')
        sysLibs.append('ws2_32')

    lliToolSources = ['tools/lli.cpp']
    if LLVM_VERSION >= Version(3, 3):
        lliToolSources.extend(['tools/RemoteTarget.cpp', 'tools/RecordingMemoryManager.cpp'])
    lliTool = env_llvm.Program('kiara-lli', lliToolSources, LIBS=['KIARA_LLVM', LLVM_LIB]+sysLibs)

    # preprocessor

    if HAVE_CLANG:
        env_llvm.AppendUnique(CPPDEFINES=[CLANG_LIB_DIR_DEF])
        preprocessorTool = env_llvm.Program('kiara-preprocessor', env.Glob('tools/preprocessor/*.cpp'),
                                            LIBS=env.Split('Clang'))

    # Build LLVM-dependent part of the compiler
    kiara.sources.extend(env.Glob("KIARA/Compiler/LLVM/*.cpp"))

    app_ccflags = env.Split('$CCFLAGS')+ccwarnflags
    env.Program('kiara-lang', 'KIARA/Compiler/tools/lang.cpp', LIBS=['DFC', 'KIARA' ], CCFLAGS=app_ccflags) # 'ldap', 'lber'
    env.Program('kiara-macro-preprocessor', 'KIARA/Compiler/tools/preprocess.cpp', LIBS=['DFC', 'KIARA'], CCFLAGS=app_ccflags) # 'ldap', 'lber'

    libs = ['DFC', 'KIARA']
    if not isWin32:
        # FIXME Not clear why this dependency is needed for clang
        #       and GCC on some systems
        libs.append('pthread')
    env.Program('kiara_codegentest', 'tests/codegentest.cpp', LIBS=libs, CCFLAGS=app_ccflags) # 'ldap', 'lber'
    env.Program('kiara_runtimetest', 'tests/runtimetest.cpp', LIBS=libs, CCFLAGS=app_ccflags) # 'ldap', 'lber'

    if HAVE_LLVM and HAVE_LLVMTOOLS:
        bitcode_env = env.CreateBitcodeCompilationEnvironment(cpppath=['.'])
        bitcode_bootstrap = bitcode_env.LLVMBitCode('KIARA/Bitcode/kiara_llvm_bootstrap.c')
        bitcode_bootstrap = bitcode_env.LLVMOpt('kiara_llvm_bootstrap_opt', bitcode_bootstrap)

        bitcode_env.Command(['KIARA/Bitcode/kiara_llvm_bootstrap_data.h'],
                            [bitcode_bootstrap[0].abspath, bin2c_tool[0]],
                            bin2c_tool[0].abspath + ' $SOURCE > $TARGET')

    # This emitter will be used later by a Builder,
    # and has an explicit dependency on the codegen tool
    def removeAsmTool_emitter(target, source, env):
        env.Depends(target, removeAsmTool)
        return (target, source)

    # Create a builder (that uses the emitter) to build .cpp files from .cgt files
    # The use of abspath is so that codegen's directory doesn't have to be added
    # to the shell path.
    bld = Builder(action = removeAsmTool[0].abspath + ' ${_concat("-d ", DELETE_SYMBOLS, "", __env__, lambda x:x, TARGET, SOURCE)} $SOURCE -o $TARGET',
                  emitter = removeAsmTool_emitter,
                  suffix = '.bc', src_suffix = '.bc')
    env['BUILDERS']['RemoveAsm'] = bld

# Build 3rd party libraries
third_party_libs = SConscript('third_party/SConscript')
kiara.libs.append('curl')
kiara.libs.append('jansson_static')
kiara.libs.append('uriparser_static')
kiara.libs.append('http_parser_static')

env.SharedLibrary('KIARA', kiara.sources+kiara.objects, LIBS=kiara.libs, CPPDEFINES=kiara.cppdefines, CCFLAGS=kiara.ccflags)

c_ccflags = env.Split('$CCFLAGS')
cpp_ccflags = env.Split('$CCFLAGS')
ndds_c_ccflags = env.Split('$CCFLAGS')
ndds_cpp_ccflags = env.Split('$CCFLAGS')
if isGCC:
    # Note: Currently -Werror is disabled because of problems with newer GCC versions
    # -Werror

    if isClangCXX:
        cxxSpec = 'c++0x'
    else:
        cxxSpec = 'c++98'

    stop_on_warnings = env.Split('-Wno-error=unused-function -Wno-error=unused-variable -Wno-error=overflow')
    c_ccflags.append(env.Split('-pedantic-errors -std=c99') + stop_on_warnings)
    cpp_ccflags.append(env.Split('-pedantic-errors -std='+cxxSpec+' -Wno-long-long -Wno-variadic-macros -Wno-unused-local-typedefs') + stop_on_warnings)
    ndds_c_ccflags.append(env.Split('-pedantic -std=c99'))
    ndds_cpp_ccflags.append(env.Split('-pedantic -std='+cxxSpec+' -Wno-long-long -Wno-variadic-macros'))

env.Program('kiara-version', 'tools/version.c', LIBS=env.Split('DFC KIARA ')) # ldap lber


#env.Program('kiara-http-server', env.Glob('KIARA/Server/*.cpp'), LIBS=env.Split('boost_thread'))

# Tests

env.Program('kiara_parsertest', 'tests/parsertest.cpp', LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber
env.Program('kiara_constvaluetest', 'tests/constvaluetest.cpp', LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber
env.Program('kiara_collectortest', 'tests/collectortest.cpp', LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber
env.Program('kiara_valuetest', 'tests/valuetest.cpp', LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_apitest', 'tests/apitest.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_apitest_c', 'tests/apitest_c.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_apidemo_c', 'tests/apidemo_c.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_apiexample', 'tests/apiexample.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_buffertest', 'tests/buffertest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_encrypttest', 'tests/encrypttest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

#env.Program('kiara_asio_client', 'tests/asio_client.cpp',
#            LIBS=env.Split('DFC KIARA ssl crypto pthread ldap lber'), CCFLAGS=cpp_ccflags)


if HAVE_NDDS_C:
    cppdefines = env.Split('$CPPDEFINES')

    cppdefines.append(('RTI_CDR_SIZEOF_LONG_DOUBLE', env['SIZEOF_LONGDOUBLE']))

    env.Program('kiara_apiexample_dds', 'tests/apiexample_dds.c',
                LIBS=env.Split('DFC KIARA '), CCFLAGS=ndds_c_ccflags, CPPDEFINES=cppdefines) # ldap lber
    env.Program('kiara_apiexample_dds_cpp', 'tests/apiexample_dds_cpp.cpp',
                LIBS=env.Split('DFC KIARA '), CCFLAGS=ndds_cpp_ccflags, CPPDEFINES=cppdefines) # ldap lber
    env.Program('kiara_apiexample2_dds',
            env.Glob('tests/dds_cxx/*.cpp'),
            LIBS=env.Split('DFC KIARA '), CCFLAGS=ndds_cpp_ccflags, CPPDEFINES=cppdefines) # ldap lber

env.Program('kiara_apiexample_cpp', 'tests/apiexample_cpp.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_apiexample1', 'tests/apiexample1.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_apiexample2',
            env.Glob('tests/cxx/*.cpp'),
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_apidemo', 'tests/apidemo.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber


env.Program('kiara_basetypetest', 'tests/basetypetest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_basetypetest_server', 'tests/basetypetest_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

obj = env.Object('tests/calctest_data_access.c')

env.Program('kiara_calctest', env.Split('tests/calctest.c')+obj,
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_calctest_cpp', 'tests/calctest_cpp.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_calctest_server', env.Split('tests/calctest_server.c')+obj,
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_calctest_server_c', 'tests/calctest_server_c.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_structtest', 'tests/structtest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_structtest_server', 'tests/structtest_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_enctest', 'tests/enctest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_enctest_cpp', 'tests/enctest_cpp.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_enctest_server', 'tests/enctest_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_enctest_forward_server', 'tests/enctest_forward_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_arraytest', 'tests/arraytest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_arraytest_server', 'tests/arraytest_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_aostest', 'tests/aostest.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

env.Program('kiara_aostest_cpp', 'tests/aostest_cpp.cpp',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_aostest_server', 'tests/aostest_server.c',
            LIBS=env.Split('DFC KIARA '), CCFLAGS=c_ccflags) # ldap lber

# Chat test
chat_sources = env.Split("""
tests/chat/ChatClient.cpp
tests/chat/KeyUtils.cpp
""")
env.Library("kiara_test_chat", chat_sources)

env.Program('kiara_dummy_chat_client',
            ['tests/chat/dummy_chat_client.cpp'],
            LIBS=env.Split('DFC KIARA kiara_test_chat '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_remote_chat_client',
            ['tests/chat/remote_chat_client.cpp'],
            LIBS=env.Split('DFC KIARA kiara_test_chat '), CCFLAGS=cpp_ccflags) # ldap lber

env.Program('kiara_remote_chat_server',
            ['tests/chat/remote_chat_server.cpp'],
            LIBS=env.Split('DFC KIARA kiara_test_chat'), CCFLAGS=cpp_ccflags)


# Simple test
simple_sources = env.Split("""
tests/simple/SimpleClient.cpp
""")
env.Library("kiara_test_simple", simple_sources, CCFLAGS=cpp_ccflags)

env.Program('kiara_dummy_simple_client',
            ['tests/simple/dummy_simple_client.cpp'],
            LIBS=env.Split('DFC KIARA kiara_test_simple '), # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('kiara_remote_simple_client',
            ['tests/simple/remote_simple_client.cpp'],
            LIBS=env.Split('DFC KIARA kiara_test_simple '), # ldap lber
            CCFLAGS=cpp_ccflags)

# Benchmarks

env.SharedLibrary('BoostUtil',
            env.Split('benchmarks/mnb/Server.cpp benchmarks/mnb/Session.cpp'),
            CCFLAGS=cpp_ccflags,
            CPPDEFINES=env.Split("$CPPDEFINES BOOST_UTIL_BUILD_DLL"))

env.SharedLibrary('CommonTypes',
            env.Split('''
            benchmarks/mnb/MarketData.cpp
            benchmarks/mnb/QuoteRequest.cpp
            benchmarks/mnb/MarketDataEntry.cpp
            benchmarks/mnb/RelatedSym.cpp'''),
            CCFLAGS=cpp_ccflags,
            CPPDEFINES=env.Split("$CPPDEFINES COMMON_TYPES_BUILD_DLL"))

if not isWin32:
    libs = ['pthread']
else:
    libs = []

env.Program('BoostPublisher',
            ['benchmarks/mnb/BoostPublisher.cpp'],
            LIBS=env.Split('BoostUtil boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('BoostSubscriber',
            ['benchmarks/mnb/BoostSubscriber.cpp'],
            LIBS=env.Split('BoostUtil boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('BoostTypedPublisher',
            ['benchmarks/mnb/BoostTypedPublisher.cpp'],
            LIBS=env.Split('BoostUtil CommonTypes boost_serialization boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('BoostTypedSubscriber',
            ['benchmarks/mnb/BoostTypedSubscriber.cpp'],
            LIBS=env.Split('BoostUtil CommonTypes boost_serialization boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

# Special Version

env.SharedLibrary('BoostUtil2',
            env.Split('benchmarks/mnb2/Server.cpp benchmarks/mnb2/Session.cpp'),
            CCFLAGS=cpp_ccflags,
            CPPDEFINES=env.Split("$CPPDEFINES BOOST_UTIL_BUILD_DLL"))

env.SharedLibrary('CommonTypes2',
            env.Split('''
            benchmarks/mnb2/MarketData.cpp
            benchmarks/mnb2/QuoteRequest.cpp
            benchmarks/mnb2/MarketDataEntry.cpp
            benchmarks/mnb2/RelatedSym.cpp'''),
            CCFLAGS=cpp_ccflags,
            CPPDEFINES=env.Split("$CPPDEFINES COMMON_TYPES_BUILD_DLL"))

env.Program('Boost2Publisher',
            ['benchmarks/mnb2/BoostPublisher.cpp'],
            LIBS=env.Split('BoostUtil boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('Boost2Subscriber',
            ['benchmarks/mnb2/BoostSubscriber.cpp'],
            LIBS=env.Split('BoostUtil boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('BoostTyped2Publisher',
            ['benchmarks/mnb2/BoostTypedPublisher.cpp'],
            LIBS=env.Split('BoostUtil2 CommonTypes2 boost_serialization boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

env.Program('BoostTyped2Subscriber',
            ['benchmarks/mnb2/BoostTypedSubscriber.cpp'],
            LIBS=env.Split('BoostUtil2 CommonTypes2 boost_serialization boost_thread')+libs, # ldap lber
            CCFLAGS=cpp_ccflags)

# Kiara version

env.SharedLibrary('CommonTypesKiara',
            env.Split('''
            benchmarks/kiara/MarketData.c
            benchmarks/kiara/QuoteRequest.c
            benchmarks/kiara/MarketDataEntry.c
            benchmarks/kiara/RelatedSym.c'''),
            CCFLAGS=c_ccflags,
            CPPDEFINES=env.Split("$CPPDEFINES COMMON_TYPES_BUILD_DLL"))

env.Program('KiaraTypedPublisher', 'benchmarks/kiara/KiaraTypedPublisher.c',
            LIBS=env.Split('DFC KIARA CommonTypesKiara'), CCFLAGS=c_ccflags) # ldap lber

env.Program('KiaraTypedSubscriber', 'benchmarks/kiara/KiaraTypedSubscriber.c',
            LIBS=env.Split('DFC KIARA CommonTypesKiara'), CCFLAGS=c_ccflags) # ldap lber

# Kiara version

env.Program('KiaraTyped2Publisher', 'benchmarks/kiara2/KiaraTypedPublisher.c',
            LIBS=env.Split('DFC KIARA'), CCFLAGS=c_ccflags) # ldap lber

env.Program('KiaraTyped2Subscriber', 'benchmarks/kiara2/KiaraTypedSubscriber.c',
            LIBS=env.Split('DFC KIARA'), CCFLAGS=c_ccflags) # ldap lber

# Publish public headers
env.PublicHeaders('KIARA', 'KIARA/kiara.h')
env.PublicHeaders('KIARA', 'KIARA/kiara_macros.h')
env.PublicHeaders('KIARA', 'KIARA/kiara_cxx_macros.hpp')
env.PublicHeaders('KIARA', 'KIARA/kiara_pp_annotation.h')
env.PublicHeaders('KIARA/DB', 'KIARA/DB/Type.def')
for dir in env.Split('''
KIARA/Common KIARA/Common/MS KIARA/Common/Config KIARA/Core KIARA/CDT KIARA/DB KIARA/IDL KIARA/Utils KIARA/Components
'''):
    env.PublicHeaders(dir, dir+'/*.h')
    env.PublicHeaders(dir, dir+'/*.hpp')

if HAVE_LLVM and HAVE_LLVMTOOLS:
    jansson = third_party_libs.get('jansson', None)
    ortecdr_lib = third_party_libs.get('ortecdr', None)
#    curl = third_party_libs.get('curl', None)
    libfastcdr = third_party_libs.get('fastcdr', None)

    bitcode_env = env.CreateBitcodeCompilationEnvironment(
                      cpppath=['.',
                               'third_party/jansson/src',
                               'third_party/orte-cdr/include',
                               'KIARA/Components',
                               'third_party/fastcdr/include',
                               'third_party/eprosima-common/code'],
                      cppdefines=[])
    bitcode_env.AppendUnique(LLVM_CXXFLAGS=['-std=c++0x'])
    bitcode_env.AppendUnique(LLVM_CPPDEFINES=['BUILD_FOR_KIARA'])


    # CDT
    base64 = bitcode_env.LLVMBitCode(bitcode_env.Split('KIARA/CDT/kr_base64.c'))
    dbuffer = bitcode_env.LLVMBitCode(bitcode_env.Split('KIARA/CDT/kr_dbuffer_kdecl.c KIARA/CDT/kr_dbuffer.c'))
    dstring = bitcode_env.LLVMBitCode(bitcode_env.Split('KIARA/CDT/kr_dstring.c'))
    dumpdata = bitcode_env.LLVMBitCode(bitcode_env.Split('KIARA/CDT/kr_dumpdata.c'))
    components = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/*.c'))

    calctest_data_access = bitcode_env.LLVMBitCode(bitcode_env.Split('tests/calctest_data_access.c'))
    lib = bitcode_env.LLVMLink('calctest_data_access_module_nopt', calctest_data_access+dstring)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('calctest_data_access'), lib)

    jsonrpc = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/JSONRPC/*.c'))
    tbp = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/TBP/*.c'))
    dummy = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/dummy/*.c'))
    ortecdr = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/ORTE-CDR/*.c'))
    fastcdr = bitcode_env.LLVMBitCode(bitcode_env.Glob('KIARA/Components/FASTCDR/*.cpp'))

    # API Impl
    #api_impl = bitcode_env.LLVMBitCode('api_impl_nopt', bitcode_env.Split('KIARA/Components/api_impl.c'))
    #lib = api_impl
    #lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('api_impl'), lib)

    # API Impl
    #api_impl = bitcode_env.LLVMBitCode('api_impl_nopt', bitcode_env.Split('KIARA/Components/api_impl.c'))
    #lib = api_impl
    #lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('api_impl'), lib)

    # JSONRPC Protocol
    lib = bitcode_env.LLVMLink('jsonrpc_kp_nopt', base64+dbuffer+dumpdata+components+jansson+jsonrpc)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('jsonrpc_kp'), lib)

    # TBP Protocol
    lib = bitcode_env.LLVMLink('tbp_kp_nopt', dbuffer+dumpdata+components+tbp)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('tbp_kp'), lib)

    # ORTE/CDR Protocol
    lib = bitcode_env.LLVMLink('ortecdr_kp_nopt', dbuffer+dumpdata+components+ortecdr_lib+ortecdr)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('ortecdr_kp'), lib)

    # FASTCDR
    lib = bitcode_env.LLVMLink('fastcdr_kp_nopt', dbuffer+dumpdata+components+libfastcdr+fastcdr)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('fastcdr_kp'), lib)

    # Dummy Protocol
    lib = bitcode_env.LLVMLink('dummy_kp_nopt', dbuffer+dumpdata+components+dummy)
    lib_opt = bitcode_env.LLVMOpt(bitcode_env.GlobalLib('dummy_kp'), lib)

    bitcode_env.InstallFiles(bitcode_env.GetLibDir(), bitcode_env.Glob('KIARA/Components/*.kl'))

# Local Variables:
# tab-width:4
# indent-tabs-mode:nil
# End:
# vim: set expandtab tabstop=4 shiftwidth=4:
