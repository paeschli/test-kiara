struct Context;

extern [C] load_module_ctx(ctx:ptr(Context), fileName:ptr(char)) -> void;
def load_module(fileName:ptr(char)) load_module_ctx(getContext(), fileName);

extern [C] write_module_ctx(ctx:ptr(Context), fileName:ptr(char)) -> void;
def write_module(fileName:ptr(char)) write_module_ctx(getContext(), fileName);

def intrinsic [builtin] sizeof(a:any):size_t "sizeof";

def intrinsic [llvm,always_inline] __deref__(v:ptr(int)) -> ref(int)
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  ret ${rettype} %${argname0} "
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ref(int)) -> int
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  %r = load ${argtype0} %${argname0} "
"  ret ${rettype} %r"
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ref(size_t)) -> size_t
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  %r = load ${argtype0} %${argname0} "
"  ret ${rettype} %r"
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ptr(float)) -> ref(float)
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  ret ${rettype} %${argname0} "
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ref(float)) -> float
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  %r = load ${argtype0} %${argname0} "
"  ret ${rettype} %r"
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ptr(double)) -> ref(double)
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  ret ${rettype} %${argname0} "
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ref(double)) -> double
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  %r = load ${argtype0} %${argname0} "
"  ret ${rettype} %r"
"} ";

def intrinsic [llvm,always_inline] __deref__(v:ref(ptr(double))) -> ptr(double)
"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
"  %r = load ${argtype0} %${argname0} "
"  ret ${rettype} %r"
"} ";

#def intrinsic [llvm,always_inline] __deref__(v:ref(ptr(int))) -> ptr(int)
#"define ${rettype} @${mangledName}(${argtype0} nocapture %${argname0}) nounwind uwtable readonly { "
#"  %r = load ${argtype0} %${argname0} "
#"  ret ${rettype} %r"
#"} ";

# C's Dereference
def [always_inline] unary * (x:ptr(double)) -> ref(double) __deref__(x);

def intrinsic [llvm,C,always_inline] malloc(size:size_t) -> ptr(void)
"declare noalias ${rettype} @${mangledName}(${argtype0}) nounwind";

def intrinsic [llvm,C,always_inline] free(ptr:ptr(void)) -> void
"declare void @${mangledName}(${argtype0} nocapture) nounwind";

def intrinsic [llvm,always_inline] to_int_ptr(val:ptr(void)) -> ptr(int)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}) nounwind uwtable readnone { "
"  %r = bitcast ${argtype0} %${argname0} to ${rettype} "
"  ret ${rettype} %r "
"} ";

def intrinsic [llvm,always_inline] to_double_ptr(val:ptr(void)) -> ptr(double)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}) nounwind uwtable readnone { "
"  %r = bitcast ${argtype0} %${argname0} to ${rettype} "
"  ret ${rettype} %r "
"} ";


def intrinsic [llvm,always_inline] to_size_t(val:int) -> size_t
"define %size_t @${mangledName}(%int %val) nounwind uwtable readnone {"
"  $(if $(equal ${int} ${size_t}) $(join \" \" ret %int %val) "
"    $(join \" \" %conv = sext %int %val to %size_t "
"      ret %size_t %conv)) "
"}";

def intrinsic [llvm,always_inline] to_size_t(val:size_t) -> size_t
"define ${rettype} @${mangledName}(${argtype0} %${argname0}) nounwind uwtable readnone { "
"  ret ${rettype} %${argname0} "
"}";

def intrinsic [llvm,always_inline] binary = 2 (a:ref(int), b:int) -> ref(int)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"  store ${argtype1} %${argname1}, ${argtype0} %${argname0} "
"  ret ${rettype} %${argname0} "
"}";

def intrinsic [llvm,always_inline] binary = 2 (a:ref(size_t), b:size_t) -> ref(size_t)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"  store ${argtype1} %${argname1}, ${argtype0} %${argname0} "
"  ret ${rettype} %${argname0} "
"}";

def intrinsic [llvm,always_inline] binary = 2 (a:ref(float), b:float) -> ref(float)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"  store ${argtype1} %${argname1}, ${argtype0} %${argname0} "
"  ret ${rettype} %${argname0} "
"}";

def intrinsic [llvm,always_inline] binary = 2 (a:ref(double), b:double) -> ref(double)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"  store ${argtype1} %${argname1}, ${argtype0} %${argname0} "
"  ret ${rettype} %${argname0} "
"}";


def intrinsic [llvm,always_inline] binary = 2 (a:ref(ptr(double)), b:ptr(double)) -> ref(ptr(double))
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"  store ${argtype1} %${argname1}, ${argtype0} %${argname0} "
"  ret ${rettype} %${argname0} "
"}";

def intrinsic [llvm,always_inline] binary != 10 (a:int, b:int) -> boolean
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"entry: "
"  %cmp = icmp ne ${argtype0} %${argname0}, %${argname1}"
"  ret ${rettype} %cmp"
"}";

def intrinsic [llvm,always_inline] binary == 10 (a:int, b:int) -> boolean
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable { "
"entry: "
"  %cmp = icmp eq ${argtype0} %${argname0}, %${argname1}"
"  ret ${rettype} %cmp"
"}";

def intrinsic [llvm,always_inline] binary + 20 (a:int, b:int) -> int
"define %int @${mangledName}(%int %a, %int %b) nounwind uwtable readnone {"
"  %add = add nsw %int %b, %a"
"  ret %int %add"
"}";

def intrinsic [llvm,always_inline] binary + 20 (a:size_t, b:size_t) -> size_t
"define %size_t @${mangledName}(%size_t %a, %size_t %b) nounwind uwtable readnone {"
"  %add = add %size_t %b, %a"
"  ret %size_t %add"
"}";

def intrinsic [llvm,always_inline] binary * 40 (a:int, b:int) -> int
"define %int @${mangledName}(%int %a, %int %b) nounwind uwtable readnone {"
"  %mul = mul nsw %int %b, %a"
"  ret %int %mul"
"}";

def intrinsic [llvm,always_inline] binary * 40 (a:size_t, b:size_t) -> size_t
"define %size_t @${mangledName}(%size_t %a, %size_t %b) nounwind uwtable readnone {"
"  %mul = mul %size_t %b, %a"
"  ret %size_t %mul"
"}";

def intrinsic [llvm,always_inline] binary < 10 (a:size_t, b:size_t) -> boolean
"define zeroext i1 @${mangledName}(%size_t %a, %size_t %b) nounwind uwtable readnone {"
"  %cmp = icmp ult %size_t %a, %b"
"  ret i1 %cmp"
"}";

def intrinsic [llvm,always_inline] print(a:int) -> void
"@printi.str = private unnamed_addr constant [3 x i8] c\"%i\\00\" "
"declare %int @printf(%char_ptr nocapture, ...) nounwind "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable {"
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([3 x i8]* @printi.str,  %size_t 0,  %size_t 0), ${argtype0} %${argname0}) nounwind"
"  ret void"
"}";

def intrinsic [llvm,always_inline] print(a:size_t) -> void
"@printsz.str = private unnamed_addr constant [4 x i8] "
" $(if $(equal $(getsysname) windows) "
"  \"c\\\"%Iu\\\\00\\\"\" "
"  \"c\\\"%zu\\\\00\\\"\") "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable {"
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([4 x i8]* @printsz.str,  %size_t 0,  %size_t 0), %size_t %${argname0}) nounwind"
"  ret void"
"}";

def intrinsic [llvm,always_inline] print(a:double) -> void
"@printd.str = private unnamed_addr constant [3 x i8] c\"%f\\00\" "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable {"
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([3 x i8]* @printd.str,  %size_t 0,  %size_t 0), ${argtype0} %${argname0})"
"  ret void"
"}";

def intrinsic [llvm,always_inline] print(a:float) -> void
"@printf.str = private unnamed_addr constant [3 x i8] c\"%f\\00\" "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable { "
"entry: "
"  %conv = fpext ${argtype0} %${argname0} to double "
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([3 x i8]* @printf.str,  %size_t 0,  %size_t 0), double %conv)"
"  ret void"
"}";

def intrinsic [llvm,always_inline] print(p:ptr(void)) -> void
"@printp.str = private unnamed_addr constant [3 x i8] c\"%p\\00\" "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable { "
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([3 x i8]* @printp.str, %size_t 0, %size_t 0), ${argtype0} %${argname0}) nounwind "
"  ret void "
"}";

def intrinsic [llvm,always_inline] print(p:ptr(char)) -> void
"@prints.str = private unnamed_addr constant [3 x i8] c\"%s\\00\" "
"define void @${mangledName}(${argtype0} %${argname0}) nounwind uwtable { "
"entry:"
"  %call = tail call %int (%char_ptr, ...)* @printf(%char_ptr getelementptr inbounds ([3 x i8]* @prints.str, %size_t 0, %size_t 0), ${argtype0} %${argname0}) nounwind "
"  ret void"
"}";

# Check this function (move before to_float)
def newline() print("\n");

def intrinsic [llvm,always_inline] to_float(d:double) -> float
"define ${rettype} @${mangledName}(${argtype0} %${argname0}) nounwind uwtable readnone { "
"entry: "
"  %conv = fptrunc ${argtype0} %${argname0} to ${rettype} "
"  ret ${rettype} %conv "
"}";
