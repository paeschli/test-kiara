undef binary = 9 (LHS:double, RHS:double):double;

def intrinsic [llvm] ltdd(a:double, b:double):boolean
"define zeroext i1 @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %cmp = fcmp olt double %a, %b"
"  ret i1 %cmp"
"}";

def intrinsic [llvm] gtdd(a:double, b:double):boolean
"define zeroext i1 @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %cmp = fcmp ogt double %a, %b"
"  ret i1 %cmp"
"}";

def intrinsic [llvm] divdd(a:double, b:double):double
"define double @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %div = fdiv double %a, %b"
"  ret double %div"
"}";

def intrinsic [llvm] binary < 10 (a:double, b:double):double
"define double @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %cmp = fcmp olt double %a, %b"
"  %conv = zext i1 %cmp to i32"
"  %conv1 = sitofp i32 %conv to double"
"  ret double %conv1"
"}";

#def binary > 10 (a:double, b:double) gtdd(a,b);
def intrinsic [llvm] binary + 20 (a:double, b:double):double
"define double @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %add = fadd double %a, %b"
"  ret double %add"
"}";

def intrinsic [llvm] binary - 20 (a:double, b:double):double
"define double @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %sub = fsub double %a, %b"
"  ret double %sub"
"}";

def intrinsic [llvm] binary * 40 (a:double, b:double):double
"define double @${mangledName}(double %a, double %b) nounwind uwtable readnone {"
"  %mul = fmul double %a, %b"
"  ret double %mul"
"}";

# Logical unary not.
def unary!(v:double)
  if v then
    0.0
  else
    1.0;

# Unary negate.
def unary-(v:double)
  0.0-v;

# Define > with the same precedence as <.
def binary> 10 (LHS:double, RHS:double)
  RHS < LHS;

# Binary logical or, which does not short circuit.
def binary| 5 (LHS:double, RHS:double)
  if LHS then
    1.0
  else if RHS then
    1.0
  else
    0.0;

# Binary logical and, which does not short circuit.
def binary& 6 (LHS:double, RHS:double)
  if !LHS then
    0.0
  else
    !!RHS;

# Define = with slightly lower precedence than relationals.
def binary = 9 (LHS:double, RHS:double)
  !(LHS < RHS | LHS > RHS);

# Define ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
def binary : 1 (x:double, y:double) y;

extern [C] putchard(char:double):double;
def printdensity(d:double)
  if d > 8.0 then
    putchard(32.0)  # ' '
  else if d > 4.0 then
    putchard(46.0)  # '.'
  else if d > 2.0 then
    putchard(43.0)  # '+'
  else
    putchard(42.0); # '*'

printdensity(1.0): printdensity(2.0): printdensity(3.0):
       printdensity(4.0): printdensity(5.0): printdensity(9.0):
       putchard(10.0);

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def mandleconverger(real:double, imag:double, iters:double, creal:double, cimag:double)
  if iters > 255.0 | (real*real + imag*imag > 4.0) then
    iters
  else
    mandleconverger(real*real - imag*imag + creal,
                    2.0*real*imag + cimag,
                    iters+1.0, creal, cimag);

# Return the number of iterations required for the iteration to escape
def mandleconverge(real:double, imag:double)
  mandleconverger(real, imag, 0.0, real, imag);

# Compute and plot the mandlebrot set with the specified 2 dimensional range
# info.
def mandelhelp(xmin:double, xmax:double, xstep:double, ymin:double, ymax:double, ystep:double)
  for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
       printdensity(mandleconverge(x,y)))
    : putchard(10.0)
  );

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart:double, imagstart:double, realmag:double, imagmag:double)
  mandelhelp(realstart, realstart+realmag*78.0, realmag,
             imagstart, imagstart+imagmag*40.0, imagmag);

mandel(-2.3, -1.3, 0.05, 0.07);
