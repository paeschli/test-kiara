extern [C] include_file_ctx(ctx:ptr(Context), fileName:ptr(char)):void;
def include_file(fileName:ptr(char)) include_file_ctx(getContext(), fileName);

include_file("stdlib.kl");

load_module("json_process_tool.bc");

struct IntFloat {
       a : int;
       b : float;
       c : ptr(double);
};

def intrinsic [llvm] binary . 80 (s:ref(IntFloat), sym:symbol("a")):ref(int)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable readnone {"
"entry:"
"  %r = getelementptr inbounds ${argtype0} %${argname0}, %size_t 0, i32 0"
"  ret ${rettype} %r"
"}";

def intrinsic [llvm] binary . 80 (s:ref(IntFloat), sym:symbol("b")):ref(float)
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable readnone {"
"entry:"
"  %r = getelementptr inbounds ${argtype0} %${argname0}, %size_t 0, i32 1"
"  ret ${rettype} %r"
"}";

def intrinsic [llvm] binary . 80 (s:ref(IntFloat), sym:symbol("c")):ref(ptr(double))
"define ${rettype} @${mangledName}(${argtype0} %${argname0}, ${argtype1} %${argname1}) nounwind uwtable readnone {"
"entry:"
"  %r = getelementptr inbounds ${argtype0} %${argname0}, %size_t 0, i32 2"
"  ret ${rettype} %r"
"}";

def testA(value:ref(IntFloat)) value.a = 1;

def test() {
    var value:IntFloat in {
      testA(value);
      value.a = 12;
      value.b = to_float(2.0);
      value.c = to_double_ptr(malloc(sizeof(double)));
      *value.c = 33.0;
      print(value.a); newline();
      print(value.b); newline();
      print(*value.c); newline();
      free(value.c);
    };
};

test();
